// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @unique //matches kinde id
  email String @unique
  firstName String @map(name: "first_name")
  lastName String @map(name : "last_name")
  File File[]
  Message Message[]
  razorpayCustomerId String? @unique @map(name: "razorpay_customer_id")
  razorpaySubscriptionId String? @unique @map(name: "razorpay_subscription_id")
  razorpayPriceId String? @map(name: "razorpay_price_id")
  razorpayCurrentPeriodEnd DateTime? @map(name: "razorpay_current_period_end")

}
enum UploadStaus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File{
  id String @id @default(cuid())
  name String
  uploadStaus UploadStaus @default(PENDING)
  url String
  key String
  Message Message[]

  User User? @relation(fields: [userId] , references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message{
  id String @id @default(cuid())
  text String @db.Text()
  isUserMessage Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
}